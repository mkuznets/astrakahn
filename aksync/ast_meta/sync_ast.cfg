#-----------------------------------------------------------------
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# Copyright (C) 2014
# License: BSD
#-----------------------------------------------------------------

# name -> str
# inputs -> [str]
# outputs -> [str]
# decls -> DeclList
# states -> StateList
Sync: [name, inputs, outputs, decls*, states*]

# decls -> [StoreVar | StateVar, ...]
DeclList: [decls**]

# name -> str
StoreVar: [name]

# name -> str
# type -> IntType
# value -> int
StateVar: [name, type*, value]

# size -> int
IntType: [size]

# states -> [State, ...]
StateList: [states**]

# name -> str
# trans_orders -> [TransOrder, ...]
State: [name, trans_orders**]

# trans_stmt -> [Trans, ...]
TransOrder: [trans_stmt**]

# port -> str
# condition -> CondSegmark | CondDataMsg | CondEmpty | CondElse
# guard -> IntExp
# actions -> [Assign | Send | Goto, ...]
Trans: [port, condition*, guard*, actions**]

# depth -> str
# pattern -> [str]
# tail -> str
CondSegmark: [depth, pattern, tail]

# pattern -> [str]
# tail -> str
CondDataMsg: [pattern, tail]

CondEmpty: []
CondElse: []

# lhs -> str
# rhs -> DataExp | IntExp
Assign: [lhs, rhs*]

# items -> [ItemThis | ItemVar | ItemExpand | ItemPair, ...]
DataExp: [terms**]

ItemThis: []

# name -> str
ItemVar: [name]

# name -> str
ItemExpand: [name]

# label -> str
# value -> ItemVar | IntExp
ItemPair: [label, value*]

# msg -> MsgSegmark | MsgData | MsgNil
# port -> str
Send: [msg*, port]

# depth -> IntExp
# data_exp -> DataExp
MsgSegmark: [depth*, data_exp*]

# data_exp -> DataExp
MsgRecord: [data_exp*]

# state -> str
Goto: [state]

# exp -> str
# args -> list
# terms -> dict
IntExp: [exp, args, terms]
